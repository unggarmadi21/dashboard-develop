/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractOptions, Options } from "web3-eth-contract";
import { Block } from "web3-eth";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { Callback, TransactionObject } from "./types";

export class MigratedZBGCard extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  methods: {
    supportsInterface(
      _interfaceId: string | number[]
    ): TransactionObject<boolean>;

    getApproved(_tokenId: number | string): TransactionObject<string>;

    individualSupply(_tokenId: number | string): TransactionObject<string>;

    tokensOwned(
      _owner: string
    ): TransactionObject<{
      indexes: (string)[];
      balances: (string)[];
      0: (string)[];
      1: (string)[];
    }>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: number | string
    ): TransactionObject<string>;

    exists(_tokenId: number | string): TransactionObject<boolean>;

    tokenByIndex(_index: number | string): TransactionObject<string>;

    ownerOf(_tokenId: number | string): TransactionObject<string>;

    tokenIdToDNA(arg0: number | string): TransactionObject<string>;

    balanceOf(_owner: string): TransactionObject<string>;

    balanceOfCoin(
      _address: string,
      _tokenId: number | string
    ): TransactionObject<string>;

    checkValidator(_address: string): TransactionObject<boolean>;

    nonces(arg0: string): TransactionObject<string>;

    getTokenDetailsById(
      _tokenId: number | string
    ): TransactionObject<{
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    tokenURI(_tokenId: number | string): TransactionObject<string>;

    isLimitedEdition(_tokenId: number | string): TransactionObject<boolean>;

    allowedTokens(arg0: string): TransactionObject<boolean>;

    isApprovedForAll(
      _owner: string,
      _operator: string
    ): TransactionObject<boolean>;

    transfer(
      _to: string,
      _tokenId: number | string,
      _amount: number | string
    ): TransactionObject<void>;

    approve(_to: string, _tokenId: number | string): TransactionObject<void>;

    safeTransferFrom(
      _from: string,
      _to: string,
      _tokenId: number | string,
      _amount: number | string
    ): TransactionObject<void>;

    toggleToken(_token: string): TransactionObject<void>;

    batchTransferFrom(
      _from: string,
      _to: string,
      _tokenIds: (number | string)[],
      _amounts: (number | string)[]
    ): TransactionObject<void>;

    mintToken(
      _tokenId: number | string,
      _tokenDNA: number | string
    ): TransactionObject<void>;

    transferFrom(
      _from: string,
      _to: string,
      _tokenId: number | string
    ): TransactionObject<void>;

    safeBatchTransferFrom(
      _from: string,
      _to: string,
      _tokenIds: (number | string)[],
      _amounts: (number | string)[],
      _data: (string | number[])[]
    ): TransactionObject<void>;

    depositToGateway(
      _tokenId: number | string,
      amount: number | string
    ): TransactionObject<void>;

    batchMintToken(
      _tokenIds: (number | string)[],
      _tokenDNAs: (number | string)[]
    ): TransactionObject<void>;

    renounceOwnership(): TransactionObject<void>;

    disableFaucet(_faucet: string): TransactionObject<void>;

    addValidator(
      _validator: string,
      _v: (number | string)[],
      _r: (string | number[])[],
      _s: (string | number[])[]
    ): TransactionObject<void>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean
    ): TransactionObject<void>;

    claimToken(
      _tokenId: number | string,
      _amount: number | string,
      _sig: (string | number[])[]
    ): TransactionObject<void>;

    removeValidator(
      _validator: string,
      _v: (number | string)[],
      _r: (string | number[])[],
      _s: (string | number[])[]
    ): TransactionObject<void>;

    enableFaucet(_faucet: string): TransactionObject<void>;

    claimTokenNFT(
      _tokenId: number | string,
      _sig: (string | number[])[]
    ): TransactionObject<void>;

    transferOwnership(_newOwner: string): TransactionObject<void>;

    migrateTokens(
      _tokenIds: (number | string)[],
      _receivers: (string)[],
      _amounts: (number | string)[]
    ): TransactionObject<void>;

    stopMigration(): TransactionObject<void>;

    name(): TransactionObject<string>;
    implementsERC721(): TransactionObject<boolean>;
    totalSupply(): TransactionObject<string>;
    InterfaceId_ERC165(): TransactionObject<string>;
    numValidators(): TransactionObject<string>;
    implementsERC721X(): TransactionObject<boolean>;
    owner(): TransactionObject<string>;
    symbol(): TransactionObject<string>;
    nonce(): TransactionObject<string>;
  };
  events: {
    MigrationStopped(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    TokenMinted(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    TokenClaimed(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    FaucetToggled(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    AddedValidator(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    RemovedValidator(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    OwnershipRenounced(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    OwnershipTransferred(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    BatchTransfer(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    TransferToken(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    Transfer(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    Approval(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    ApprovalForAll(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
