/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractOptions, Options } from "web3-eth-contract";
import { Block } from "web3-eth";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { Callback, TransactionObject } from "./types";

export class ValidatorManagerContract extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  methods: {
    validators(arg0: number | string): TransactionObject<string>;

    powers(arg0: number | string): TransactionObject<string>;

    nonces(arg0: string): TransactionObject<string>;

    allowedTokens(arg0: string): TransactionObject<boolean>;

    signedByValidator(
      _message: string | number[],
      signersIndex: number | string,
      _v: number | string,
      _r: string | number[],
      _s: string | number[]
    ): TransactionObject<void>;

    checkThreshold(
      _message: string | number[],
      signersIndex: (number | string)[],
      _v: (number | string)[],
      _r: (string | number[])[],
      _s: (string | number[])[]
    ): TransactionObject<void>;

    isTokenAllowed(tokenAddress: string): TransactionObject<boolean>;

    rotateValidators(
      _newValidators: (string)[],
      _newPowers: (number | string)[],
      _signIndexes: (number | string)[],
      _v: (number | string)[],
      _r: (string | number[])[],
      _s: (string | number[])[]
    ): TransactionObject<void>;

    toggleAllowAnyToken(
      allow: boolean,
      validatorIndex: number | string
    ): TransactionObject<void>;

    toggleAllowToken(
      tokenAddress: string,
      allow: boolean,
      validatorIndex: number | string
    ): TransactionObject<void>;

    loomAddress(): TransactionObject<string>;
    threshold_denom(): TransactionObject<string>;
    nonce(): TransactionObject<string>;
    threshold_num(): TransactionObject<string>;
    totalPower(): TransactionObject<string>;
    getPowers(): TransactionObject<(string)[]>;
    getValidators(): TransactionObject<(string)[]>;
  };
  events: {
    ValidatorSetChanged(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
